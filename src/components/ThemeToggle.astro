---
// ThemeToggle.astro - 軽量ダークモード切り替えコンポーネント
import { css } from '@styles/css';

const toggleButton = css({
  position: 'fixed',
  bottom: '3rem',
  left: '50%',
  transform: 'translateX(-50%)',
  zIndex: 1000,
  width: '4rem',
  height: '4rem',
  borderRadius: '50%',
  border: 'none',
  cursor: 'pointer',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  fontSize: '2rem',
  transition: 'all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)',
  backgroundColor: 'rgba(255,255,255,0.2)',
  backdropFilter: 'blur(12px) saturate(150%)',
  border: '1px solid rgba(255,255,255,0.3)',
  filter: 'drop-shadow(0 4px 12px rgba(0, 0, 0, 0.15))',
  
  // モバイル対応
  '@media (max-width: 768px)': {
    width: '3rem',
    height: '3rem',
    fontSize: '1.5rem',
    bottom: '2rem',
  },
  
  _hover: {
    transform: 'translateX(-50%) scale(1.1)',
    backgroundColor: 'rgba(255,255,255,0.3)',
    filter: 'drop-shadow(0 6px 16px rgba(0, 0, 0, 0.2))',
  },
  
  _active: {
    transform: 'translateX(-50%) scale(1.05)',
  },
  
  _dark: {
    backgroundColor: 'rgba(255,255,255,0.1)',
    border: '1px solid rgba(255,255,255,0.2)',
    _hover: {
      backgroundColor: 'rgba(255,255,255,0.15)',
    }
  }
});
---

<button 
  class={toggleButton}
  id="theme-toggle"
  aria-label="テーマを切り替え"
  title="テーマを切り替え"
>
  <span id="theme-icon">☀️</span>
</button>

<script>
  // 軽量テーマ切り替え
  class ThemeToggle {
    private button: HTMLButtonElement;
    private icon: HTMLSpanElement;
    private currentTheme: 'light' | 'dark';

    constructor() {
      this.button = document.getElementById('theme-toggle') as HTMLButtonElement;
      this.icon = document.getElementById('theme-icon') as HTMLSpanElement;
      this.currentTheme = this.getInitialTheme();
      
      this.init();
    }

    private getInitialTheme(): 'light' | 'dark' {
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme === 'dark' || savedTheme === 'light') {
        return savedTheme;
      }
      
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }

    private init() {
      this.applyTheme(this.currentTheme);
      this.button.addEventListener('click', () => this.toggleTheme());
      
      // システム設定の変更を監視
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        if (!localStorage.getItem('theme')) {
          this.currentTheme = e.matches ? 'dark' : 'light';
          this.applyTheme(this.currentTheme);
        }
      });
    }

    private toggleTheme() {
      this.currentTheme = this.currentTheme === 'light' ? 'dark' : 'light';
      this.applyTheme(this.currentTheme);
      localStorage.setItem('theme', this.currentTheme);
    }

    private applyTheme(theme: 'light' | 'dark') {
      const html = document.documentElement;
      
      if (theme === 'dark') {
        html.classList.add('dark');
        this.icon.textContent = '🌙';
        this.button.setAttribute('aria-label', 'ライトモードに切り替え');
      } else {
        html.classList.remove('dark');
        this.icon.textContent = '☀️';
        this.button.setAttribute('aria-label', 'ダークモードに切り替え');
      }
    }
  }

  // DOMが読み込まれたら初期化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ThemeToggle());
  } else {
    new ThemeToggle();
  }

  // View Transitions API対応
  document.addEventListener('astro:page-load', () => {
    new ThemeToggle();
  });
</script>

<style>
  /* ダークモード用のCSS変数 */
  :global(html.dark) {
    color-scheme: dark;
  }

  /* 背景色の変化 */
  :global(body) {
    transition: 
      background 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94),
      color 1s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  :global(html.dark body) {
    background: linear-gradient(135deg, #0f0f23, #1a1a2e);
    color: #e2e8f0;
  }

  :global(html:not(.dark) body) {
    background: linear-gradient(135deg, #fef9e7, #fff5d6);
    color: #1a1a1a;
  }
</style>