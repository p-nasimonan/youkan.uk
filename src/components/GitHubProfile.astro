---
import { readFileSync } from 'fs';
import { css } from '@styles/css';
import { unified } from 'unified';
import remarkParse from 'remark-parse';
import remarkGfm from 'remark-gfm';
import remarkRehype from 'remark-rehype';
import rehypeHighlight from 'rehype-highlight';
import rehypeStringify from 'rehype-stringify';

interface Props {
  className?: string;
}

interface ProfileMeta {
  title: string;
  description?: string;
  updatedAt: string;
  source: string;
}

interface ParsedProfile {
  content: string;
  meta: ProfileMeta;
}

const { className } = Astro.props;

const defaultMeta: ProfileMeta = {
  title: 'GitHubプロフィール',
  updatedAt: new Date().toISOString(),
  source: 'fallback'
};

function parseMarkdownFile(filePath: string): ParsedProfile {
  try {
    const fileContent = readFileSync(filePath, 'utf8');
    
    // フロントマターとマークダウン本文を分離
    const frontmatterMatch = fileContent.match(/^---\n([\s\S]*?)\n---\n([\s\S]*)$/);
    
    if (frontmatterMatch) {
      const frontmatterText = frontmatterMatch[1];
      const content = frontmatterMatch[2];
      
      const meta: ProfileMeta = { ...defaultMeta };
      
      // フロントマター解析
      frontmatterText.split('\n').forEach((line: string) => {
        const colonIndex = line.indexOf(':');
        if (colonIndex === -1) return;
        
        const key = line.substring(0, colonIndex).trim();
        const value = line.substring(colonIndex + 1).trim().replace(/^["']|["']$/g, '');
        
        switch (key) {
          case 'title':
            meta.title = value;
            break;
          case 'description':
            meta.description = value;
            break;
          case 'updatedAt':
            meta.updatedAt = value;
            break;
          case 'source':
            meta.source = value;
            break;
        }
      });
      
      return { content, meta };
    } else {
      return { content: fileContent, meta: defaultMeta };
    }
  } catch (error) {
    console.warn('GitHubプロフィールファイルの読み込みに失敗:', error instanceof Error ? error.message : 'Unknown error');
    
    const fallbackContent = `# プロフィール

GitHubプロフィールが利用できません。
\`npm run fetch:github\` を実行してください。

- GitHub: [p-nasimonan](https://github.com/p-nasimonan)
`;
    
    return { content: fallbackContent, meta: defaultMeta };
  }
}

// unified/remark/rehypeを使ったマークダウン処理
async function markdownToHtml(markdown: string): Promise<string> {
  try {
    const result = await unified()
      .use(remarkParse) // マークダウンをparseする
      .use(remarkGfm)   // GitHub Flavored Markdown対応
      .use(remarkRehype) // マークダウンASTからHTMLASTに変換
      .use(rehypeHighlight) // シンタックスハイライト
      .use(rehypeStringify) // HTMLに変換
      .process(markdown);
    
    return String(result);
  } catch (error) {
    console.error('マークダウン処理エラー:', error);
    return `<p>マークダウンの処理に失敗しました: ${error instanceof Error ? error.message : 'Unknown error'}</p>`;
  }
}

const { content, meta } = parseMarkdownFile('./src/content/github-profile.md');
const htmlContent = await markdownToHtml(content);
---
<section class={`${css({
  padding: '2rem',
  borderRadius: 'lg'
})} ${className || ''}`}>
  <div class={css({
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: '1rem'
  })}>
    <h2 class={css({
      fontSize: '2xl',
      fontWeight: 'bold',
      color: '#1a1a1a',
      _dark: {
        color: '#f7fafc'
      }
    })}>
      📖 {meta.title}
    </h2>
    
    <div class={css({
      fontSize: 'sm',
      color: '#4a5568',
      _dark: {
        color: 'rgba(247, 250, 252, 0.8)'
      }
    })}>
      最終更新: {new Date(meta.updatedAt).toLocaleDateString('ja-JP')}
    </div>
  </div>

  <!-- カスタムマークダウンスタイル -->
  <div 
    class={css({
      fontSize: '14px',
      lineHeight: '1.7',
      color: '#24292f',
      
      _dark: {
        color: '#e6edf3'
      },
      
      // 見出しスタイル
      '& h1': {
        fontSize: '2xl',
        fontWeight: 'bold',
        marginTop: '1.5rem',
        marginBottom: '1rem',
        paddingBottom: '0.5rem',
        borderBottom: '1px solid #d8dee4',
        color: '#1a1a1a',
        _dark: {
          borderBottomColor: '#30363d',
          color: '#f0f6fc'
        }
      },
      
      '& h2': {
        fontSize: 'xl',
        fontWeight: 'bold',
        marginTop: '1.5rem',
        marginBottom: '1rem',
        paddingBottom: '0.3rem',
        borderBottom: '1px solid #d8dee4',
        color: '#1a1a1a',
        _dark: {
          borderBottomColor: '#30363d',
          color: '#f0f6fc'
        }
      },
      
      '& h3': {
        fontSize: 'lg',
        fontWeight: 'bold',
        marginTop: '1.25rem',
        marginBottom: '0.75rem',
        color: '#1a1a1a',
        _dark: {
          color: '#f0f6fc'
        }
      },
      
      '& h4': {
        fontSize: 'md',
        fontWeight: 'bold',
        marginTop: '1rem',
        marginBottom: '0.5rem',
        color: '#1a1a1a',
        _dark: {
          color: '#f0f6fc'
        }
      },
      
      // パラグラフとテキスト
      '& p': {
        marginTop: '1rem',
        marginBottom: '1rem'
      },
      
      // リンク
      '& a': {
        color: '#0969da',
        textDecoration: 'underline',
        _hover: {
          textDecoration: 'none'
        },
        _dark: {
          color: '#58a6ff'
        }
      },
      
      // リスト
      '& ul, & ol': {
        marginTop: '1rem',
        marginBottom: '1rem',
        paddingLeft: '2rem'
      },
      
      '& li': {
        marginTop: '0.25rem',
        marginBottom: '0.25rem'
      },
      
      // 画像
      '& img': {
        maxWidth: '100%',
        height: 'auto',
        borderRadius: 'md',
        display: 'block',
        margin: '1rem auto',
        backgroundColor: 'rgba(255,255,255,0.1)',
        padding: '0.5rem',
        border: '1px solid rgba(255,255,255,0.2)',
        _dark: {
          backgroundColor: 'rgba(255,255,255,0.05)',
          border: '1px solid rgba(255,255,255,0.1)'
        }
      },
      
      // コードブロック
      '& pre': {
        backgroundColor: '#f6f8fa',
        borderRadius: 'md',
        padding: '1rem',
        overflow: 'auto',
        fontSize: 'sm',
        lineHeight: '1.45',
        margin: '1rem 0',
        _dark: {
          backgroundColor: '#161b22'
        }
      },
      
      '& code': {
        backgroundColor: '#f6f8fa',
        padding: '0.2em 0.4em',
        borderRadius: 'sm',
        fontSize: '0.85em',
        _dark: {
          backgroundColor: '#161b22'
        }
      },
      
      '& pre code': {
        backgroundColor: 'transparent',
        padding: '0',
        borderRadius: '0'
      },
      
      // 引用
      '& blockquote': {
        paddingLeft: '1rem',
        borderLeft: '4px solid #d8dee4',
        color: '#656d76',
        fontStyle: 'italic',
        margin: '1rem 0',
        _dark: {
          borderLeftColor: '#30363d',
          color: '#8b949e'
        }
      },
      
      // テーブル
      '& table': {
        borderCollapse: 'collapse',
        width: '100%',
        margin: '1rem 0'
      },
      
      '& th, & td': {
        padding: '0.75rem',
        textAlign: 'left',
        borderBottom: '1px solid #d8dee4',
        _dark: {
          borderBottomColor: '#30363d'
        }
      },
      
      '& th': {
        fontWeight: 'bold',
        backgroundColor: '#f6f8fa',
        _dark: {
          backgroundColor: '#161b22'
        }
      }
    })}
    set:html={htmlContent}
  />
  
  {meta.source !== 'fallback' && (
    <div class={css({
      marginTop: '1rem',
      padding: '1rem',
      borderRadius: 'md',
      fontSize: 'sm',
      color: '#4a5568',
      backgroundColor: 'rgba(255,255,255,0.1)',
      backdropFilter: 'blur(8px)',
      border: '1px solid rgba(255,255,255,0.2)',
      _dark: {
        color: 'rgba(247, 250, 252, 0.8)',
        backgroundColor: 'rgba(255,255,255,0.05)',
        border: '1px solid rgba(255,255,255,0.1)'
      }
    })}>
      <p>
        🔗 <a href="https://github.com/p-nasimonan/p-nasimonan" target="_blank" rel="noopener noreferrer" class={css({ 
          color: '#1a1a1a', 
          textDecoration: 'underline',
          _dark: {
            color: '#f7fafc'
          }
        })}>
          GitHubプロフィール
        </a> から自動取得
      </p>
    </div>
  )}
</section>